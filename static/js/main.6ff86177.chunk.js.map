{"version":3,"sources":["Message.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","id","className","time","note","TrafficLight","state","timer","clicked","messageIsVisible","crossTheStreet","bind","this","setState","setInterval","setTimeout","clearInterval","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6MAUmBA,MARnB,SAAiBC,GAEb,OACI,6BACI,uBAAGC,GAAG,SAASC,UAAWF,EAAMG,KAAO,IAAMH,EAAMG,KAAO,GAAK,aAAe,eAAgBH,EAAMI,QCkDjGC,G,kBAnDb,WAAYL,GAAO,IAAD,8BAChB,4CAAMA,KACDM,MAAQ,CACXC,MAAO,EACPC,SAAS,EACTC,kBAAkB,GAGpB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBARN,E,8EAWC,IAAD,OACZC,KAAKC,SAAS,CACZL,SAAS,EACTC,kBAAkB,IAGpB,IAAIN,EAAOW,aAAY,WACrB,EAAKD,SAAS,CACZN,MAAO,EAAKD,MAAMC,MAAQ,MAE3B,KACHQ,YAAW,WACTC,cAAcb,GACd,EAAKU,SAAS,CACZN,MAAO,EACPC,SAAS,MAEV,O,+BAKP,OACA,oCACE,yBAAKN,UAAU,aACb,yBAAKA,UAAWU,KAAKN,MAAMC,OAAS,GAAyB,IAApBK,KAAKN,MAAMC,MAAc,gCAAgC,oBAClG,yBAAKL,UAAYU,KAAKN,MAAMC,OAAS,GAAKK,KAAKN,MAAMC,MAAQ,IAAOK,KAAKN,MAAMC,OAAS,IAAMK,KAAKN,MAAMC,OAAS,GAAK,sCAAwC,uBAC/J,yBAAKL,UAAYU,KAAKN,MAAMC,OAAS,IAAMK,KAAKN,MAAMC,OAAS,GAAM,oCAAsC,sBAC3G,4BAAQN,GAAG,MAAMgB,SAAUL,KAAKN,MAAME,QAASU,QAASN,KAAKF,gBAA7D,6BACA,yBAAKR,UAAU,SAASU,KAAKN,MAAMC,QAGnC,kBAAC,EAAD,CACAJ,KAAMS,KAAKN,MAAMC,MACjBC,QAASI,KAAKN,MAAME,QACpBJ,KAAMQ,KAAKN,MAAMC,MAAQ,IAAMK,KAAKN,MAAMC,MAAQ,GAAK,uBAAyB,uB,GA/C7DY,cCQPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6ff86177.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Message(props) {\r\n\r\n    return (\r\n        <div>\r\n            <p id=\"msgDiv\" className={props.time < 10 || props.time > 16 ? \"doNotCross\" : \"pleaseCross\"}>{props.note}</p>\r\n        </div>\r\n    )};\r\n\r\n    export default Message;","import React, {Component} from 'react';\nimport Message from './Message';\nimport '../src/style.scss';\n\nclass TrafficLight extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      timer: 0,\n      clicked: false,\n      messageIsVisible: false\n    }\n\n    this.crossTheStreet = this.crossTheStreet.bind(this);\n  }\n  \n    crossTheStreet(){\n        this.setState({\n          clicked: true,\n          messageIsVisible: true\n        })\n        \n        let time = setInterval(() => {\n          this.setState({\n            timer: this.state.timer + 1,\n        });\n        }, 1000);\n        setTimeout(() => {\n          clearInterval(time);\n          this.setState({\n            timer: 0,\n            clicked: false\n          });\n        }, 20000);\n      }\n\n\n  render(){\n    return (\n    <>\n      <div className=\"container\">\n        <div className={this.state.timer <= 7 || this.state.timer == 20 ? \"light red-light highlight-red\":\"light red-light\"}></div>\n        <div className={(this.state.timer >= 6 && this.state.timer < 10) || this.state.timer >= 15 && this.state.timer <= 19 ? \"light yellow-light highlight-yellow\" : \"light yellow-light\"}></div>\n        <div className={(this.state.timer >= 10 && this.state.timer <= 16) ? \"light green-light highlight-green\" : \"light green-light\"}></div>\n        <button id=\"btn\" disabled={this.state.clicked} onClick={this.crossTheStreet}>Press to cross the street</button>\n        <div className=\"timer\">{this.state.timer}</div>\n      </div>\n      \n        <Message\n        time={this.state.timer}\n        clicked={this.state.clicked}\n        note={this.state.timer < 10 || this.state.timer > 16 ? \"Please do not cross!\" : \"Please cross!\"}/>\n    </>\n  );\n}}\n\nexport default TrafficLight;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}